from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router_u = Router()

import keyboards as kb
from requests import (
    is_admin,
    is_user_registered_db,
    save_new_user,
    get_group_info_by_id,
    get_user_info_by_telegram_id,
)

class AddNewUser(StatesGroup):
    kurs = State()
    speciality = State()
    group = State()
    telegram_id = State()

@router_u.message(CommandStart())
async def Cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    if await is_admin(user_id):
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç \n\n'
            f'–ß–µ—Ä–µ–∑ –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è: \n\n'
            f'‚Ä¢ –ö—É—Ä—Å–∞\n\n'
            f'‚Ä¢ –ü–æ—Ç–æ–∫–∞\n\n'
            f'‚Ä¢ –ì—Ä—É–ø–ø—ã\n\n'
            f'–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start'
        )
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_a())
    else:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç üëãüèº,\n–Ø - —á–∞—Ç-–±–æ—Ç –î–∏—Ä–µ–∫—Ü–∏–∏\n\n'
            f'–Ø –±—É–¥—É –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –¥–µ–∫–∞–Ω–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä—É–π—Ç–µ—Å—å: '
        )
        await message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_u(user_id))

@router_u.message(F.text == 'üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def Cmd_register(message: Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    if await is_user_registered_db(user_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        await state.update_data(telegram_id=user_id)
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å", reply_markup=await kb.kurs_registration())

@router_u.callback_query(F.data.startswith("reg.kurs.number_"))
async def Process_kurs(query: CallbackQuery, state: FSMContext):
    kurs = int(query.data.split("_")[1])
    await state.update_data(kurs=kurs)
    await query.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=await kb.specialities())

@router_u.callback_query(F.data.startswith("reg.speciality_"))
async def Process_speciality(query: CallbackQuery, state: FSMContext):
    speciality_id = int(query.data.split("_")[1])
    await state.update_data(speciality=speciality_id)
    data = await state.get_data()
    course_id = data["kurs"]
    await query.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É", reply_markup=await kb.group(course_id, speciality_id))

@router_u.callback_query(F.data.startswith("reg.group_"))
async def Process_group(query: CallbackQuery, state: FSMContext):
    group = int(query.data.split("_")[1])
    data = await state.get_data()
    result = await save_new_user(data["telegram_id"], data["kurs"], data["speciality"], group)
    if result is True:
        group_name, speciality_name, course_name = await get_group_info_by_id(group)
        message_text = (
            f"\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
            f"–ö—É—Ä—Å: <b>{course_name}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{speciality_name}</b>\n"
            f"–ì—Ä—É–ø–ø–∞: <b>{group_name}</b>\n"
        )
        await query.message.answer(message_text)
    else:
        await query.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    await query.message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_u(data['telegram_id']))

@router_u.message(F.text == 'üìã –ú–æ—è –∞–Ω–∫–µ—Ç–∞')
async def View_profile(message: Message):
    user_id = message.from_user.id
    user_data = await get_user_info_by_telegram_id(user_id)
    if user_data:
        group_name, speciality_name, course_name = user_data
        profile_text = (
            f"üìã –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
            f"–ö—É—Ä—Å: <b>{course_name}</b>\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{speciality_name}</b>\n"
            f"–ì—Ä—É–ø–ø–∞: <b>{group_name}</b>\n"
        )
        await message.answer(profile_text, reply_markup=await kb.newregistration(user_id))
    else:
        await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=await kb.menu_u(user_id))

@router_u.callback_query(F.data.startswith("reg.new_"))
async def Process_group(query: CallbackQuery, state: FSMContext):
    telegram_id = query.data.split("_")[1]
    await state.update_data(telegram_id=telegram_id)
    await query.message.answer('–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –∫—É—Ä—Å', reply_markup=await kb.kurs_registration())

@router_u.callback_query(F.data.startswith("return_to_menu"))
async def Return_to_menu(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    if await is_admin(user_id):
        await state.clear()
        await query.message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_a())
    else:
        await state.clear()
        await query.message.answer(f'üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=await kb.menu_u(user_id))